#!/bin/bash
# Script to edit spice netlist output of KiCad to make it work with ngspice 
# This is a shell script for interfacing between a Netlist produced by KiCad and ngspice which runs a circuit simulation of the circuit.
# Most of the work is done by sed which checks each line of the Netlist and outputs it either unchanged or with specified changes
# Now with command line options -m (to run Mousepad) and -ng (to run NGspice)
# the command supported is either "ng filename" or "ng option filename" 
# KiCad generates a file whose name is "filename.cir"
# The sed command outputs a file named "filename.tat" which is then used to call ngspice.
# The option to call mousepad is useful when debugging to check the contents of the file. It is called for the recognised option "-m" 
# and also for any unrecognised option.
# The option to call ngspice is the main purpose of the program, for use when the output file is correct. It is called for the recognised option "-ng" 
# and also for no option code.
#
# The sed command consists of a series of sub-commands. Each subcommand is on its own line starting with "-e" and ending with a backslash and newline character.
# The backslash ("\") is an escape character that tells sed to not interpret the following character as the end of the sed command. This structure allows 
# a long sequence of sub-commands to make up the overall sed command.
# The first 3 sub-commands are for switch models
# The next 2 sub-commands are for independent voltage sources Vsine and Vpulse. The KiCad definition does not allow spaces between the many parameters for each. 
# The sed sub-commands separate out the parameters and output them separated by spaces, as required by ngspice.
# The next 2 sub-commands are for Voltage Controlled Voltage Sources (VCVS) 
# The next 4 sub-commands are for a delay buffer and an adcBridge (still being worked on)
# After this is a series of 3 pairs of sub-commands to deal with 3 different MOSFETS: IRFZ44N, PSMN3R3-80PS, 2N7000.
# Each of these MOSFETs has an associated subcircuit definition file. In order to use a subcircuit file, ngspice requires a component name staring with letter "X".
# However the "proper" or "usual" designation of MOSFETs in a circuit is with a "Q". Hence there are 2 jobs to do. a) prefix the component designation with "X";
# and b) include an instruction to include the MOSFET subcircuit file. Although ngspice will tolerate multiple includes of each subcircuit file, it seems more 
# efficient to only include each subcircuit file only once. 
# The first sub-command in each pair identifies the MOSFET line, consisting of a leading q or Q and a number of 1 or more digits; and ending with the MOSFET name.
# The result of that first sub-command is to add the letter "X" to the beginning of the pattern space (that is, the place where the input line is held for analysis).
# The second sub-command in each pair begins with the line addresses 1 (for line 1), /MOSFET_name/ which limits its operation to the lines between 1 and the first line
# which contains the MOSFET name. So if this is the first occurrence of the MOSFET name, it appends a new line and the appropriate include command. 
# If this is a subsequent occurrence of the MOSFET name, this sub-command is not done because of the line address limits, and hence the pattern space ends up being output,
# that is, an "X" followed by the original line.
# The next set of sub-commands is the same arrangement for transistors TIP122, TIP125 and TIP127. These are Darlington power transistors descibed by subcircuit definitions 
# and requiring an "X" in front of the component designation.
# the final sub-command replaces ".end" with "*.end" which comments out this line which if left in generates an error message in ngspice.

if [ -n "$2" ] # there are 2 command line parameters; ie ng option file
then
  echo "Running script file ng on" $2.cir 
  file=$2
else           # only one command line parameter; ie ng file
  echo "Running script file ng on" $1.cir 
  file=$1
fi
sed -e 's/SwitchNO/SwitchNO \n.model SwitchNO SW Roff=1e7 Ron=0.01 Vt=1 Vh=0.1 /' \
    -e 's/Schmidt\([0-9][0-9.]*\)\(VHysteresis\)/Schmidt\n.model Schmidt SW Roff=1e7 Ron=0.01 Vt=0 Vh=\1 /' \
    -e 's/SwitchNC/SwitchNC \n.model SwitchNC SW Ron=1e7 Roff=0.01 Vt=4 Vh=0.1 /' \
    -e 's/Vsine\([0-9][0-9.pnum]*VOffset\)\([0-9][0-9.pnum]*Vpeak\)\([0-9][0-9.k]*Hz\)\([0-9][0-9.pnum]*sDelay\)\([0-9][0-9.]*Damping\)\([0-9][0-9.]*Phase\)/sin \1 \2 \3 \4 \5 \6/' \
    -e 's/Vpulse\([0-9.][0-9.pnum]*VInit\)\([0-9.][0-9.pnum]*Vpulsed\)\([0-9.][0-9.pnum]*sDelay\)\([0-9.][0-9.pnum]*sRise\)\([0-9.][0-9.pnum]*sFall\)\([0-9.][0-9.pnum]*sWidth\)\([0-9.][0-9.pnum]*sPeriod\)\([0-9.][0-9.]*Phase\)/pulse \1 \2 \3 \4 \5 \6 \7 \8/' \
    -e 's/VCVS\([0-9][0-9.]*\)\(\Gain\)/\1 \2 /' \
    -e 's/\(^ENLeq[0-9]*\) *\([A-Za-z0-9_\-]*\) *\([A-Za-z0-9_\-]*\) *\([A-Za-z0-9_\-]*\) *\([A-Za-z0-9_\-]*\) VCVS\([0-9][0-9.]*\)V\([0-9][0-9.]*\)VTrigger/\1 \2 \3 value={V(\4)>\7 ? \5 + \6 : \5} /' \
    -e 's/Buffer\([0-9][0-9.pnum]*sRise\)\([0-9][0-9.pnum]*sFall\)/Buffer \n.model Buffer d_buffer(rise_delay=\1 fall_delay=\2) /' \
    -e 's/adcBridge/adcBridge \n.model adcBridge adc_bridge(in_low=2 in_high=3) /' \
    -e 's/\(^SCO_subcircuit[0-9]*\) *\([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]* \)\([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) SwitchCO\([0-9][0-9.pnum]*\)\(Lo\)\([0-9][0-9.pnum]*\)\(Hi\)/SNO\1 \2 \3 \5\ \6 MNO\1 \n.model MNO\1 SW Vt=2.5 Vh=0 Roff=1e9 Ron=\9 \nSNC\1 \2 \4 \5 \6 MNC\1 \n.model MNC\1 SW Roff=\7 Ron=1e9 Vt=2.5 Vh=0/' \
    -e 's/\(^DelayBuffer[0-9]*\)  *\([A-Za-z0-9_-]*\) \([A-Za-z0-9_-]*\) \([A-Za-z0-9_-]*\) [A-Za-z]*\([0-9.]*\)[A-Za-z]*\([0-9.]*\)[A-Za-z]*_\([pnum]\)sUnits/V\1 node5V\1 \4 5V \nSNO\1 nodeCOM\1 node5V\1 \2 \4 MNO\1 \n.model MNO\1 SW Vt=2.5 Vh=0 Roff=1e9 Ron=\5 \nSNC\1 nodeCOM\1 \4 \2 \4 MNC\1 \n.model MNC\1 SW Vt=2.5 Vh=0 Ron=1e9 Roff=\6 \nC\1 nodeCOM\1 \4 1.44269504\7F \nENL\1 \3 \4 value={V(nodeCOM\1)>2.5 ? \4+5 : \4} /' \
    -e 's/^[qQ][0-9][0-9]*.*IRFZ44N[ \t]*$/X\0; X added/' \
    -e '1,/IRFZ44N/s/^X[qQ][0-9][0-9]*.*IRFZ44N[ \t]*; X added$/\0\n.include ..\/..\/ComponentModels\/irfz44n.spi/' \
    -e 's/^[qQ][0-9][0-9]*.*PSMN3R3-80PS[ \t]*$/X\0 ; X added/' \
    -e '1,/PSMN3R3-80PS/s/^X[qQ][0-9][0-9]*.*PSMN3R3-80PS[ \t]*; X added$/\0\n.include ..\/..\/ComponentModels\/psmn3r3-80ps.spi/' \
    -e 's/^[qQ][0-9][0-9]*.*2N7000[ \t]*$/X\0 ; X added/' \
    -e '1,/2N7000/s/^X[qQ][0-9][0-9]*.*2N7000[ \t]* ; X added$/\0\n.include ..\/..\/ComponentModels\/2n7000.spi/' \
    -e 's/^[qQ][0-9][0-9]*.*TIP12[257][ \t]*$/X\0/' \
    -e '1,/TIP122/s/^X[qQ][0-9][0-9]*.*\(TIP122\)[ \t]*$/\0\n.include ..\/..\/ComponentModels\/tip122.spi/' \
    -e '1,/TIP125/s/^X[qQ][0-9][0-9]*.*\(TIP125\)[ \t]*$/\0\n.include ..\/..\/ComponentModels\/tip125.spi/' \
    -e '1,/TIP127/s/^X[qQ][0-9][0-9]*.*\(TIP127\)[ \t]*$/\0\n.include ..\/..\/ComponentModels\/tip127.spi/' \
    -e 's/.end/*.end/' \
    <$file.cir >$file.tat

if [ -n "$2" ]
then
  if [[ $1 = "-ng" ]]; then
    ngspice $2.tat
  else
    if [[ $1 = "-m" ]]; then
      mousepad $2.tat
    else
      echo "option not recognised, running mousepad"
      echo "recognised options are -m and -ng"
      mousepad $2.tat
    fi
  fi
else
    echo "no option code, running ngspice"
    ngspice $1.tat
fi

