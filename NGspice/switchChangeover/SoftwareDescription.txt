Notes on using SED to parse the changeover switch netlist.

The overall task is to create a KiCad component for a change over switch, putting its two ON resistance values into the Spice Netlist, and then parsing it with SED into a useable ngspice script command set. 

The first part is to make the component and output the netlist. Here is what the netlist line looks like:
"SCO_subcircuit1  VCOM Net-_SCO_subcircuit1-Pad2_ GND IN GND SwitchCO94Lo120Hi		"
                                                             ^---- "value" field containing the 2 ON resistance values
                                                       ^---^-------control nodes nc+ and nc-
                                                   ^---------------NC Normally Closed node ID (Ground in this case)
                       ^-------------------------------------------NO Normally Open node ID (designation created by KiCad)
                  ^------------------------------------------------COM (Common) node ID (a global label in this case) 
                ^-------Part type instance number (1 in this case, generated by automatic annotation function in KiCad)
 ^----------------------Part type field

Having got this Netlist line in the *.cir file, the next task is to parse it into components using SED. 
Here is the SED code that does this, and simply prints out the list of components:

    -e 's/\(^SCO_subcircuit[0-9]*\) *\([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) SwitchCO\([0-9][0-9.pnum]*\)\(Lo\)\([0-9][0-9.pnum]*\)\(Hi\)/.SUBCKT \n0:\0 \n1:\1 \n2:\2 \n3:\3 \n4:\4 \n5:\5 \n6:\6 \n7:\7 \n8:\8 \n9:\9 \n.ENDS /' \

Here is the output from this SED code:

.SUBCKT 
0:SCO_subcircuit1  VCOM Net-_SCO_subcircuit1-Pad2_ GND IN GND SwitchCO94Lo120Hi 
1:SCO_subcircuit1   
2:VCOM  
3:Net-_SCO_subcircuit1-Pad2_  
4:GND  
5:IN  
6:GND  
7:94 
8:Lo
9:120 
.ENDS 		

Working through the SED code, here is how it works. Note that SED does not allow line breaks or comments within its code, so it is not possible to document it within the code itself. 

-e 's/  // this is a preamble that tells SED this is an "expression" (-e field) and the start of a "substitute" line ('s/ field)
\(^SCO_subcircuit[0-9]*\) // this recognises the part type field and instance number.
                         // the ^ character tells SED to only look for this at the start of a line
                         // SCO_subcircuit is a fixed value field
                         // [0-9]* tells SED to accept 0 or more numbers (for the instance number)
                         // this piece of code puts this value into parameter \1

 *                      // " *" (space and an asterisk) tells SED to accept 0 or more space characters (for the separator before the next field)
\([A-Za-z0-9_\-]*\)     // parameter 2 (COM). Any sequence of upper or lower case letters, numbers, underscore, and hyphen
\([A-Za-z0-9_\-]*\)     // parameter 3 (NO). The hyphen has to be preceded with a \ (ie the code is \-) because the hyphen
\([A-Za-z0-9_\-]*\)     // parameter 4 (NC). is a special character used for range identification
\([A-Za-z0-9_\-]*\)     // parameter 5 (nc+). These 5 parameters are the 5 node IDs of the 5 terminals of the CO switch.
\([A-Za-z0-9_\-]*\)     // parameter 6 (nc-). These 5 code blocks are separated by a space so they are treated as separate entities.
SwitchCO                 // a fixed field, not meorised as a parameter.
\([0-9][0-9.pnum]*\)     // parameter 7, at least 1 number and 0 or more of . p n u m . This will be the ON resistance of the NC switch 
                         // Note that for NC switch, the ON resistance is put in the Roff field.
\(Lo\)                   // parameter 8, a fixed field.
\([0-9][0-9.pnum]*\)     // parameter 9, at least 1 number and 0 or more of . p n u m . This will be the ON resistance of the NO switch.
\(Hi\)                   // parameter 10, a fixed field. 
                         // This parameter cannot be output, because SED does not identify parameters above 9.
/                        // This slash tells SED this is the end of the input commands and the start of the ouput commands
.SUBCKT                  // This tells SED to output these letters
\n0:\0                   // \n for new line, 0: to label the line, and \0 to print out parameter 0
                         // Parameter 0 is the entire set of parameters, including 10 and 11, which are output here. 
\n1:\1 \n2:\2 \n3:\3 \n4:\4 \n5:\5 \n6:\6 \n7:\7 \n8:\8 \n9:\9   // new line, label and value for parameters 1 to 9, one per line
\n.ENDS                  // new line and print this code
                         // if there were any remainder of the input text (none in this case) they  would be printed here.
/'                       // tells SED this is the end of this "expression"
\                        // tells SED that the command continues on the next line

The next job is to take these parameters and output them as part of a set of valid NGspice commands to create the simulated changeover switch.
A changeover switch is just 2 switches, one NO and one NC.
So I need to create 4 lines. There will be a component line for each switch, plus a model line for each switch.

A switch component line looks like this:
S1  NodeA NodeB Controlnc+ Controlnc- ModelName
                                        ^---------- The name of the model that NGspice should associate with this component
                    ^---------^-------------------- The control voltage Vc is the difference between these two, ie nc+ minus nc-
     ^------^-------------------------------------- These are the switched nodes, and are connected either by Ron or Roff depending on the switch state
 ^--------------------------------------------------S tells NGspice this is a switch. The number is the instance number.

A switch model line looks like this:
.model ModelName SW Ron=1e7 Roff=0.01 Vt=4 Vh=0.1
                                              ^----  hysteresis voltage
                                       ^-----------  threshold voltage
                              ^--------------------  OFF resistance - applicable when Vc becomes less than Vt-Vh
                        ^----------------------------ON resistance -  applicable when Vc becomes more than Vt+Vh
                  ^----------------------------------fixed code SW tells NGspice that this is a Switch model
       ^---------------------------------------------ModelName identifies the components that this model applies to 
 ^---------------------------------------------------.model tells NGspice that this line is a model definition

The 2 switches will have 2 component lines, one NO and one NC.
I would like to call them:
SCO_subcircuit1NO
SCO_subcircuit1NC
However I cannot get this easily because parameter 1 has trailing blanks. 
Instead I will put the NO and NC before the part name, by telling SED \nSNO\1 and \nSNC\1

Next come the nodes. The NO switch uses \2 and \3. The NC switch uses \2 and \4. They both have control nodes \5 and \6.
Then I need a model name for each switch. How about MNO\1 and MNO\2. 

The next job is to make the models. They start with .model the first bit of the code is easy: .model modelName SW.
Both models will have  fixed, high value for Roff. I will use 1e9 for this. 
Both models also have Vt=2.5 and Vh=0 (I hope 0 is OK for this, if not I will make it a small number  like 0.001).
The NC model will take its Ron from parameter 8, so I will write Ron=\8, which will complete the NC model. 

Here is the complete substitute command to generate the two switches including the models.
    -e 's/\(^SCO_subcircuit[0-9]*\) *\([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]* \)\([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) \([A-Za-z0-9_\-]*\) SwitchCO\([0-9][0-9.pnum]*\)\(Lo\)\([0-9][0-9.pnum]*\)\(Hi\)/SNO\1 \2 \3 \5\ \6 MNO\1 \n.model MNO\1 SW Vt=2.5 Vh=0 Roff=1e9 Ron=\9 \nSNC\1 \2 \4 \5 \6 MNC\1 \n.model MNC\1 SW Roff=\7 Ron=1e9 Vt=2.5 Vh=0/' \


